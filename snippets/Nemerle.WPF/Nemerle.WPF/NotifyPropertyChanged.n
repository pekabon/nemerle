using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using System.ComponentModel;

namespace Nemerle.WPF
{
    [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class, Inherited = false, AllowMultiple = false)]  
    public macro NotifyPropertyChanged(tb : TypeBuilder, raisePropertyChangedMethod = null)
    {
        ignore(raisePropertyChangedMethod);

        NotifyPropertyChangedHelper.AddInterface(tb);
    }

    [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]  
    public macro NotifyPropertyChanged(tb : TypeBuilder, raisePropertyChangedMethod = <[ () ]>)
    {
        NotifyPropertyChangedHelper.ImplementInterface(Macros.ImplicitCTX(), 
                                                       tb, 
                                                       raisePropertyChangedMethod = raisePropertyChangedMethod,
                                                       macroName                  = GetName().Split(':')[0]);
    }

    [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]  
    public macro NotifyPropertyChanged(tb : TypeBuilder, raisePropertyChangedMethod =  <[ () ]>)
    {
        ignore(raisePropertyChangedMethod);

        NotifyPropertyChangedHelper.FixProperties(tb, macroName = GetName().Split(':')[0]);
    }

    public macro RaisePropertyChanged(expr, raisePropertyChangedMethod = <[ () ]>)
    {
        NotifyPropertyChangedHelper.RaisePropertyChanged(Macros.ImplicitCTX().CurrentTypeBuilder,
                                                         propName = (expr :> PExpr.Ref).name.Id,
                                                         raisePropertyChangedMethod = raisePropertyChangedMethod);
    }

    [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Property, Inherited = false, AllowMultiple = false)]  
    public macro NotifyPropertyChangedIgnore(tb : TypeBuilder, property : ParsedProperty)
    {
        NotifyPropertyChangedHelper.RegisterIgnored(tb, property);
    }

    module NotifyPropertyChangedHelper
    {       
        public AddInterface(tb : TypeBuilder) : void
        {
            tb.AddImplementedInterface(<[ System.ComponentModel.INotifyPropertyChanged ]>);
        }

        public ImplementInterface(typer                    : Typer, 
                                tb                         : TypeBuilder, 
                                raisePropertyChangedMethod : PExpr, 
                                macroName                  : string) : void
        {
            Macros.DefineCTX(typer);

            when (tb.IsDelegate  || 
                  tb.IsEnum      || 
                  tb.IsInterface || 
                  tb.IsModule)
                Message.Error(tb.Location, 
                              $"Macro $macroName is not valid on this declaration type. It is only valid on 'class' declarations.");

            def interfaceAlreadyImplemented = tb.BaseClass.TryRequire(<[ ttype: System.ComponentModel.INotifyPropertyChanged ]>);
            
            def raisePropertyChangedMethodName =  match(raisePropertyChangedMethod)
                                                    {
                                                        | <[ $(raisePropertyChangedMethodName : name) ]> => raisePropertyChangedMethodName
                                                        | _ => Name("OnPropertyChanged")
                                                    };

            unless (interfaceAlreadyImplemented)
            {
                tb.Define(<[ decl: public event PropertyChanged : PropertyChangedEventHandler; ]>);

                def raisePropertyChangedMethodDecl = <[ decl:
                                    protected virtual $(raisePropertyChangedMethodName : name)(propertyName: string) : void
                                    {
                                        def handler = PropertyChanged;
                                        when (handler != null)
                                            handler(this, PropertyChangedEventArgs(propertyName));
                                    }
                            ]>;

                tb.Define(raisePropertyChangedMethodDecl);
            }

            tb.UserData[_userDataKey] = raisePropertyChangedMethodName;
        }

        public RaisePropertyChanged(tb : TypeBuilder, propName : string, raisePropertyChangedMethod : PExpr) : PExpr
        {
            def raisePropertyChangedMethodName =  match(raisePropertyChangedMethod)
                                                    {
                                                        | <[ $(raisePropertyChangedMethodName : name) ]> => Some(raisePropertyChangedMethodName)
                                                        | _ when tb.UserData.Contains(_userDataKey) => Some(tb.UserData[_userDataKey] :> Name)
                                                        | _ => None()
                                                    };
                                                    
            match(tb.GetProperties().Filter(prop => prop.Name == propName))
            {
                | [] => Message.Error($"Class '$(tb.FullName)' does not contain a property with the name '$propName'.");
                        <[]>
                | _  when FindRaisePropertyChangedMethod(tb, raisePropertyChangedMethodName) => 
                        <[ $(raisePropertyChangedMethodName.Value : name)($(propName : string)); ]>
                | _  => 
                        Message.Error(raisePropertyChangedMethod.Location, 
                              "Specify a valid method for property changed event raising (e.g. RaisePropertyChanged(PropName, OnPropertyChanged))");
                        <[]>
            }
        }

        public FixProperties(tb : TypeBuilder, macroName : string) : void
        {
            assert2(false);
            
            def raisePropertyChangedMethodName = tb.UserData[_userDataKey] :> Name;
            
            if(!FindRaisePropertyChangedMethod(tb, Some(raisePropertyChangedMethodName)))
            {
                Message.Error(tb.Location, 
                              $"Specify a valid method for property changed event raising (e.g. [$macroName(OnPropertyChanged)])");
            }
            else
            {
                def properties = tb.GetProperties(BindingFlags.DeclaredOnly | 
                                                  BindingFlags.Instance     | 
                                                  BindingFlags.Public       | 
                                                  BindingFlags.NonPublic).
                                    Filter(property => !_ignoredProperties.Contains(tb, property.Name));

                foreach(propertyBuilder is PropertyBuilder in properties)
                {
                    match(propertyBuilder.GetSetter())
                    {
                        | setter is MethodBuilder => 
                            def loc = setter.Body.Location;
                            setter.Body = <[ $(setter.Body);
                                             $(raisePropertyChangedMethodName : name)($(propertyBuilder.Name : string)); ]>;
                            setter.Body.Location = loc;
                        | _ => ()
                    }
                }
            }
        }

        public RegisterIgnored(tb : TypeBuilder, property : ClassMember.Property) : void
        {
            _ = _ignoredProperties.Add(tb, property.Name);
        }
        
        private FindRaisePropertyChangedMethod(tb : TypeBuilder, raisePropertyChangedMethodName : option[Name]) : bool
        {
            match(raisePropertyChangedMethodName)
            {
                | Some(methodName) => tb.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).
                                         Exists(method => method.Name == methodName.Id)
                | None             => false
           }
        }

        private _ignoredProperties = SCG.HashSet.[TypeBuilder * string]();
        private _userDataKey = Guid.NewGuid();
    }
}
