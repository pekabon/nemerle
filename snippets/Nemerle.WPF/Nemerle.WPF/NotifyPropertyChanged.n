using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using System.ComponentModel;

namespace Nemerle.WPF
{
    using NotifyPropertyChangedHelper;

    [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class, Inherited = false, AllowMultiple = false)]  
    public macro NotifyPropertyChanged(tb : TypeBuilder, raiseChangedMethod = null)
    {
        ignore(raiseChangedMethod);

        AddInterface(tb);
    }

    [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]  
    public macro NotifyPropertyChanged(tb : TypeBuilder, raiseChangedMethod = <[ () ]>)
    {
        ImplementInterface(Macros.ImplicitCTX(), tb, raiseChangedMethod, GetMacroName());
    }

    [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class, Inherited = false, AllowMultiple = false)]  
    public macro NotifyPropertyChanged(tb : TypeBuilder, raiseChangedMethod =  null)
    {
        ignore(raiseChangedMethod);

        FixProperties(tb, GetMacroName());
    }

    public macro RaisePropertyChanged(property : PExpr, raiseChangedMethod = <[ () ]>)
    {
        CreateRaiseChangedMethodCall(Macros.ImplicitCTX().CurrentTypeBuilder,
                                    property,
                                    raiseChangedMethod,
                                    GetMacroName());
    }

    [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Property, Inherited = false, AllowMultiple = false)]  
    public macro NotifyChangedOptions(tb : TypeBuilder, property : ParsedProperty, params options : list[PExpr])
    {
        SetOptions(tb, property, GetMacroName(), options);
    }

    module NotifyPropertyChangedHelper
    {       
        public AddInterface(tb : TypeBuilder) : void
        {
            tb.AddImplementedInterface(<[ System.ComponentModel.INotifyPropertyChanged ]>);
        }

        public ImplementInterface(typer            : Typer, 
                                tb                 : TypeBuilder, 
                                raiseChangedMethod : PExpr, 
                                macroName          : string) : void
        {
            Macros.DefineCTX(typer);

            when (tb.IsDelegate  || 
                  tb.IsEnum      || 
                  tb.IsInterface || 
                  tb.IsModule)
                Message.Error(tb.Location, 
                              $"Macro $macroName is not valid on this declaration type. It is only valid on 'class' declarations.");

            def interfaceAlreadyImplemented = tb.BaseClass.TryRequire(<[ ttype: System.ComponentModel.INotifyPropertyChanged ]>);

            def raiseChangedMethodName = match(raiseChangedMethod)
                                         {
                                             | <[ $(methodName : name) ]> => methodName
                                             | <[()]> => Name("OnPropertyChanged")
                                             | _ =>  Message.Error(tb.Location, 
                                                                   $"Specify a valid method for property changed event raising (e.g. $macroName(PropName, OnPropertyChanged)).");
                                                     Name("OnPropertyChanged")
                                         };

            unless (interfaceAlreadyImplemented)
            {
                tb.Define(<[ decl: public event PropertyChanged : System.ComponentModel.PropertyChangedEventHandler; ]>);

                def raiseChangedMethodDecl = <[ decl:
                                                protected virtual $(raiseChangedMethodName : name)(propertyName: string) : void
                                                {
                                                    def handler = PropertyChanged;
                                                    when (handler != null)
                                                        handler(this, System.ComponentModel.PropertyChangedEventArgs(propertyName));
                                                }]>;

                tb.Define(raiseChangedMethodDecl);
            }

            SetRaiseChangedMethodName(tb, raiseChangedMethodName);
        }

        public CreateRaiseChangedMethodCall(tb : TypeBuilder, property : PExpr, raiseChangedMethod : PExpr, macroName : string) : PExpr
        {
            def OnError(message)
            {
                Message.Error(raiseChangedMethod.Location, message);
                <[]>
            }
                
            def GetRaiseChangedMethodCall(propName, raiseChangedMethodName : option[Name])
            {
                match(tb.GetProperties().Filter(prop => prop.Name == propName))
                {
                   | _::_ => raiseChangedMethodName.Map(methodName => <[ $(methodName : name)($(propName : string)); ]>) 
                            ?? OnError($"Specify a valid method for property changed event raising (e.g. $macroName(PropName, OnPropertyChanged)).")
                   | []  => OnError($"Class '$(tb.FullName)' does not contain a property with the name '$propName'.")
                }
            }

            def raiseChangedMethodName = 
                             match(raiseChangedMethod)
                             {
                                 | <[ $(methodName : name) ]> 
                                 | <[()]> when tb.UserData.Contains(_raiseChangedMethodKey) 
                                          with methodName = GetRaiseChangedMethodName(tb)
                                      => if (tb.MethodExists(methodName)) Some(methodName) else None()
                                 | _  => None()
                             };

            match(property)
            {
                | propExpr is PExpr.Ref => GetRaiseChangedMethodCall(propExpr.name.Id, raiseChangedMethodName)
                | _ => OnError($"Specify a property for changed event raising (e.g. $macroName(PropName)).")
            }
        }

        public FixProperties(tb : TypeBuilder, macroName : string) : void
        {
            def CreateRaiseChangedMethodCalls(raiseChangedMethodName, propertyName : string)
            {
                def dependentProps = GetDependentProps(tb, propertyName);
                
                //dependentProps.Map(property => <[ $(raiseChangedMethodName : name)($((property :> PExpr.Ref).Name.Id) : string); ]>)
                //unless(_ignoredProperties.Contains(tb, propertyName) || )
                //{
                    
                //}
                [<[]>]
            }
            
            def raiseChangedMethodName = GetRaiseChangedMethodName(tb);
            
            if(!tb.MethodExists(raiseChangedMethodName))
            {
                Message.Error(tb.Location, 
                              $"Specify a valid method for property changed event raising (e.g. [$macroName(OnPropertyChanged)]).");
            }
            else
            {
                def properties = tb.GetProperties(BindingFlags.DeclaredOnly | 
                                                  BindingFlags.Instance     | 
                                                  BindingFlags.Public       | 
                                                  BindingFlags.NonPublic)/*.
                                    Filter(property => !_ignoredProperties.Contains(tb, property.Name))*/;

                foreach(propertyBuilder is PropertyBuilder in properties)
                {
                    match(propertyBuilder.GetSetter())
                    {
                        | setter is MethodBuilder => 
                            //def loc = setter.Body.Location;
                            def raiseChangedMethodCalls = CreateRaiseChangedMethodCalls(raiseChangedMethodName, propertyBuilder.Name);
                            setter.Body = <[ $(setter.Body);
                                             ..$raiseChangedMethodCalls; ]>;
                            //setter.Body.Location = loc;
                        | _ => ()
                    }
                }
            }
        }
        
        public SetOptions(tb : TypeBuilder, property : ClassMember.Property, macroName : string, options : list[PExpr]) : void
        {
            assert2(false);
            
            foreach(option in options) 
            {
                | <[ IgnoreSetter ]>           => _ = _ignoredProperties.Add(tb, property.Name);
                | <[ Dependent = $prop ]> when options is [_] 
                                          with props = [prop]
                | <[ Dependent = [..$props] ]> => SetDependentProps(tb, property.Name, props)
                | e => Message.Error(e.Location, 
                                     $"Invalid options syntax in $macroName macro, valid options are: 'Dependent = [Prop1, Prop2]' and 'IgnoreSetter'.")
            }
        }

        public GetMacroName(this macroInstance : IMacro) : string
        {
            macroInstance.GetName().Split(':').First()
        }

        private MethodExists(this tb : TypeBuilder, methodName : Name) : bool
        {
            tb.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).
               Exists(method => method.Name == methodName.Id)
        }
        
        private GetRaiseChangedMethodName(tb : TypeBuilder) : Name
        {
            assert(tb.UserData.Contains(_raiseChangedMethodKey));
            
            tb.UserData[_raiseChangedMethodKey] :> Name
        }
        
        private SetRaiseChangedMethodName(tb : TypeBuilder, raiseChangedMethodName : Name) : void
        {
            tb.UserData[_raiseChangedMethodKey] = raiseChangedMethodName
        }
        
        private SetDependentProps(tb : TypeBuilder, propertyName : string, dependentProps : list[PExpr]) : void
        {
            tb.UserData[(_dependentPropsKey, propertyName)] = dependentProps
        }
        
        private GetDependentProps(tb : TypeBuilder, propertyName : string) : list[PExpr]
        {
            if(!tb.UserData.Contains((_dependentPropsKey, propertyName)))
                []
            else
                tb.UserData[(_dependentPropsKey, propertyName)] :> list[PExpr]
        }
        
        private _ignoredProperties     = SCG.HashSet.[TypeBuilder * string]();
        private _ignoredPropsKey       = Guid.NewGuid();
        private _dependentPropsKey     = Guid.NewGuid();
        private _raiseChangedMethodKey = Guid.NewGuid();
    }
}